{"version":3,"sources":["webpack:///./core/modules/createEvents.js","webpack:///./ui/Accordion.js"],"names":["createEvents","ramda__WEBPACK_IMPORTED_MODULE_1__","context","obj","$delegate","emit","_this","this","events","Object","entries","map","_ref","_ref2","_slicedToArray","key","fn","eventAndNode","capture","funk","_toConsumableArray","concat","handleFunctions","evt","transform","fns","event","_$delegate","apply","item","_ref3","_ref4","a","b","join","attachAll","root","arguments","length","undefined","dom_delegate__WEBPACK_IMPORTED_MODULE_0___default","_$delegate2","on","err","console","error","attach","remove","destroy","_$delegate3","off","$node","document","createEvent","initEvent","dispatchEvent","module","hot","accept","Accordion","el","options","_classCallCheck","_defineProperty","closeOthers","activeIndex","$$events","click [data-accordion-button]","e","elm","preventDefault","accordionKey","dataset","parseInt","state","$panels","action","machine","CLICK","$selectedIndex","close","index","_this$$panels$index","button","target","classList","add","style","display","_this$$panels$index2","focus","uiOptions","_objectSpread","defaults","JSON","parse","log","assign","mitt__WEBPACK_IMPORTED_MODULE_1__","$el","_core_modules_createEvents__WEBPACK_IMPORTED_MODULE_0__","call","querySelectorAll","href","getAttribute","querySelector","setAttribute","open"],"mappings":"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","file":"1.bundle.1537312226028.js","sourcesContent":["import Delegate from 'dom-delegate'\nimport * as R from 'ramda'\n\n/**\n * @namespace createEvents\n */\n\n// do not use an array function... we need to be able to bind\nexport const createEvents = R.curry(function(context, obj) {\n\tconst events = Object.entries(obj).map(([key, fn]) => {\n\t\tconst eventAndNode = R.compose(R.map(R.trim), R.split(' '))(key)\n\t\tconst capture = !!R.compose(R.length, R.match(/(blur|mouse)/g), R.head)(\n\t\t\teventAndNode\n\t\t)\n\t\tconst funk = typeof fn === 'string' ? this[fn] : fn\n\t\treturn [...eventAndNode, funk, capture]\n\t})\n\n\tlet $delegate\n\tlet emit\n\n\tconst handleFunctions = R.curry((evt, transform, fns) => {\n\t\tR.compose(\n\t\t\tR.forEach(event => {\n\t\t\t\t$delegate[transform](...event)\n\t\t\t}),\n\t\t\tR.map(item =>\n\t\t\t\tR.find(([a, b]) => {\n\t\t\t\t\t// alls add/remove of events without a selector - things like keydown/keyup\n\t\t\t\t\tif (typeof b === 'function') {\n\t\t\t\t\t\treturn a === item\n\t\t\t\t\t}\n\t\t\t\t\treturn [a, b].join(' ') === item\n\t\t\t\t})(evt)\n\t\t\t)\n\t\t)(fns)\n\t})(events)\n\n\treturn {\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function attachAll\n\t\t * @param {HTMLElement} root - the element to delegate to\n\t\t */\n\t\tattachAll(root = context) {\n\t\t\t$delegate = $delegate || new Delegate(root)\n\t\t\ttry {\n\t\t\t\tR.forEach(event => $delegate.on(...event))(events)\n\t\t\t} catch (err) {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tconsole.error(\n\t\t\t\t\t'Handler must be a type of Function, careful with arrow functions, they will need to be above the events object:',\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function attach\n\t\t * @param {Array} fns - an array of cuntions\n\t\t * @param {HTMLElement} root - the element to delegate to\n\t\t * @return {void}\n\t\t */\n\t\tattach(fns, root = context) {\n\t\t\t$delegate = $delegate || new Delegate(root)\n\t\t\thandleFunctions('on', fns)\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function remove\n\t\t * @param {Array} fns - an array of cuntions\n\t\t * @return {void}\n\t\t */\n\t\tremove(fns) {\n\t\t\tif (!$delegate) return\n\t\t\thandleFunctions('off', fns)\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function destroy\n\t\t * @return {void}\n\t\t */\n\t\tdestroy() {\n\t\t\tif (!$delegate) return\n\t\t\tR.forEach(event => $delegate.off(...event))(events)\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function destroy\n\t\t * @param {HTMLElement} root - the element to trigger an event on\n\t\t * @param {String} event - the name of the event to trigger\n\t\t * @return {void}\n\t\t */\n\t\temit($node, event) {\n\t\t\temit = emit || document.createEvent('HTMLEvents')\n\t\t\temit.initEvent(event, true, false)\n\t\t\t$node.dispatchEvent(emit)\n\t\t}\n\t}\n})\n\n/**\n * Create a router\n * @mixin EventsMixin\n * @description class used to manage adding/removing delegated dom events\n *\n * @example\n * import Behaviour, { mix } from '@/core/Behaviour'\n * import {\n * \tEventsMixin,\n * } from '@/core/modules/'\n *\n * export default class ExampleWithAllTheThings extends mix(Behaviour).with(\n * \tEventsMixin\n * ) {\n * \tevents = {\n * \t\t'click [data-link]': 'onClick'\n * \t}\n *\n * \tmount = () => {\n * \t\t// attach all the events\n * \t\tthis.$$events.attachAll()\n * \t\t// attach events by key\n * \t\tthis.$$events.attach(['click [data-link]'])\n * \t\t// remove events by key\n * \t\tthis.$$events.remove(['click [data-link]'])\n * \t\t// destroy all the events\n * \t\tthis.$$events.destroy()\n * \t}\n *\n * \tonClick = (e, elm) => {\n * \t\te.preventDefault()\n * \t\telm.classList.toggle('huzzah')\n * \t}\n * }\n * @return {EventsMixin}\n */\nexport const EventsMixin = superclass =>\n\tclass extends superclass {\n\t\tinit() {\n\t\t\tthis.$$events = createEvents.call(this, this.$el, this.events)\n\n\t\t\tif (super.init) super.init()\n\n\t\t\treturn this\n\t\t}\n\n\t\tdestroy() {\n\t\t\tthis.$$events.destroy()\n\t\t\tif (super.destroy) super.destroy()\n\t\t}\n\t}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { createEvents } from '@/core/modules/createEvents'\nimport mitt from 'mitt'\n\n/** *\n * @namespace Accordion\n * @class Accordion\n * @desc This class handles accordions... \n * @example \n * \n * js: \n * \n * new Accordion(document.getElementById('accordion'), { \n * \tcloseOthers: true \n * }, 'ui-key').mount()\n * \n * Required markup:\n * \n * <ul data-ui=\"Accordion\" data-ui-options='{\"close-others\": true, \"active-index\": 1}' data-ui-key=\"downloads-accordion\">\n\t\t<li>\n\t\t\t<a href=\"#bt1\" data-accordion-button>Datasheets</a>\n\t\t\t<ul class=\"list-reset hidden\" data-accordion-dropdown id=\"bt1\">...</ul>\n\t\t</li>\n\t\t<li>\n\t\t\t<a href=\"#bt2\" data-accordion-button>Datasheets</a>\n\t\t\t<ul class=\"list-reset hidden\" data-accordion-dropdown id=\"bt2\">...</ul>\n\t\t</li>\n\t\t<li>\n\t\t\t<a href=\"#bt3\" data-accordion-button>Datasheets</a>\n\t\t\t<ul class=\"list-reset hidden\" data-accordion-dropdown id=\"bt3\">...</ul>\n\t\t</li>\n\t</ul>\n *\n\n * @param {HTMLElement} el - node to bind to\n * @param {Object} options - options\n * @param {String} key - key name\n *\n * @property {Boolean} options.closeOthers - only allow one accordion to be open at a time\n * @property {Number} options.activeIndex - set one of the accordions to be open\n * \n * @return {Accordion}\n */\n\nexport default class Accordion {\n\tdefaults = {\n\t\tcloseOthers: false,\n\t\tactiveIndex: undefined\n\t}\n\n\tconstructor(el, options, key) {\n\t\tconst { uiOptions } = el.dataset\n\t\tthis.options = { ...this.defaults, ...options }\n\t\tthis.key = key\n\n\t\tif (uiOptions) {\n\t\t\tthis.options = { ...this.options, ...JSON.parse(uiOptions) }\n\t\t}\n\n\t\tlog(this.options)\n\n\t\tObject.assign(this, mitt())\n\n\t\tthis.$el = el\n\t\t// bind the dom events\n\t\tthis.$$events = createEvents.call(this, this.$el, this.events)\n\n\t\tthis.$selectedIndex = undefined\n\n\t\tthis.$panels = [\n\t\t\t...this.$el.querySelectorAll('[data-accordion-button]')\n\t\t].map((button, index) => {\n\t\t\tconst href = button.getAttribute('href')\n\t\t\tconst target = this.$el.querySelector(`${href} [data-accordion-content]`)\n\n\t\t\tbutton.setAttribute('data-accordion-key', index)\n\n\t\t\treturn {\n\t\t\t\tbutton,\n\t\t\t\ttarget,\n\t\t\t\tmachine: {\n\t\t\t\t\topen: { CLICK: 'close' },\n\t\t\t\t\tclose: { CLICK: 'open' }\n\t\t\t\t},\n\t\t\t\tstate: this.options.activeIndex === index ? 'open' : 'close'\n\t\t\t}\n\t\t})\n\n\t\tif (typeof this.options.activeIndex !== 'undefined') {\n\t\t\tthis.open(this.options.activeIndex)\n\t\t\tthis.$selectedIndex = this.options.activeIndex\n\t\t}\n\t}\n\n\t/** *\n\t * @memberof Accordion\n\t * @method mount\n\t * @desc Add the events\n\t *\n\t * @return {void}\n\t */\n\tmount = () => {\n\t\tthis.$$events.attachAll()\n\t}\n\n\tevents = {\n\t\t'click [data-accordion-button]': 'onClick'\n\t}\n\n\t/** *\n\t * @memberof Accordion\n\t * @method unmount\n\t * @desc remove the events\n\t *\n\t * @return {void}\n\t */\n\tunmount = () => {\n\t\tthis.$$events.destroy()\n\t}\n\n\t/** *\n\t * @memberof Accordion\n\t * @method onClick\n\t * @desc the click event...\n\t * @param {Object} e : the event object\n\t * @param {HTMLElement} elm : the node clicked\n\t *\n\t * @return {void}\n\t */\n\tonClick = (e, elm) => {\n\t\te.preventDefault()\n\t\tconst { closeOthers } = this.options\n\t\tconst { accordionKey } = elm.dataset\n\t\tconst key = parseInt(accordionKey, 10)\n\t\t// get the current state\n\t\tconst { state } = this.$panels[key]\n\t\t// get the new action\n\t\tconst action = this.$panels[key].machine[state].CLICK\n\n\t\t// if close others, and we have some to close... close it\n\t\tif (\n\t\t\tcloseOthers &&\n\t\t\ttypeof this.$selectedIndex !== 'undefined' &&\n\t\t\tthis.$selectedIndex !== key\n\t\t) {\n\t\t\tthis.close(this.$selectedIndex)\n\t\t}\n\n\t\t// do the new action\n\t\tthis[action](key)\n\n\t\t// update the selected item ref\n\t\tthis.$selectedIndex = key\n\t}\n\n\t/** *\n\t * @memberof Accordion\n\t * @method open\n\t * @desc Open the accordion\n\t * @param {Number} index : index of the accordion to open\n\t *\n\t * @return {void}\n\t */\n\topen = index => {\n\t\tthis.$panels[index].state = 'open'\n\t\tconst { button, target } = this.$panels[index]\n\n\t\tbutton.classList.add('is-active')\n\t\ttarget.style.display = 'block'\n\t\t// target.querySelectorAll('a')[0].focus()\n\t}\n\n\t/** *\n\t * @memberof Accordion\n\t * @method close\n\t * @desc Close the accordion\n\t * @param {Number} index : index of the accordion to close\n\t *\n\t * @return {void}\n\t */\n\tclose = index => {\n\t\tthis.$panels[index].state = 'close'\n\t\tconst { button, target } = this.$panels[index]\n\n\t\tbutton.classList.remove('is-active')\n\t\tbutton.focus()\n\t\ttarget.style.display = ''\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}