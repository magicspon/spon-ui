{"version":3,"sources":["webpack:///./core/modules/createEvents.js","webpack:///./ui/Validation.js"],"names":["createEvents","ramda__WEBPACK_IMPORTED_MODULE_1__","context","obj","$delegate","emit","_this","this","events","Object","entries","map","_ref","_ref2","_slicedToArray","key","fn","eventAndNode","capture","funk","_toConsumableArray","concat","handleFunctions","evt","transform","fns","event","_$delegate","apply","item","_ref3","_ref4","a","b","join","attachAll","root","arguments","length","undefined","dom_delegate__WEBPACK_IMPORTED_MODULE_0___default","_$delegate2","on","err","console","error","attach","remove","destroy","_$delegate3","off","$node","document","createEvent","initEvent","dispatchEvent","module","hot","accept","Validate","el","options","_classCallCheck","_defineProperty","ajax","change [required]","submit","form","$el","_objectSpread","$$events","_core_modules_createEvents__WEBPACK_IMPORTED_MODULE_1__","call","rules","$fields","ramda__WEBPACK_IMPORTED_MODULE_2__","acc","field","name","message","domify__WEBPACK_IMPORTED_MODULE_3___default","parent","closest","appendChild","querySelectorAll","setAttribute","forEach","_ref2$","removeChild","e","elm","preventDefault","handleErrors","errors","validate_js__WEBPACK_IMPORTED_MODULE_0___default","input","showError","removeError","node","classList","add","textContent","_ref5","_this$options","errorArray","_ref7","_ref8","value","fields","data","FormData","defaults","assign","mitt__WEBPACK_IMPORTED_MODULE_4__"],"mappings":"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","file":"5.bundle.1537312226028.js","sourcesContent":["import Delegate from 'dom-delegate'\nimport * as R from 'ramda'\n\n/**\n * @namespace createEvents\n */\n\n// do not use an array function... we need to be able to bind\nexport const createEvents = R.curry(function(context, obj) {\n\tconst events = Object.entries(obj).map(([key, fn]) => {\n\t\tconst eventAndNode = R.compose(R.map(R.trim), R.split(' '))(key)\n\t\tconst capture = !!R.compose(R.length, R.match(/(blur|mouse)/g), R.head)(\n\t\t\teventAndNode\n\t\t)\n\t\tconst funk = typeof fn === 'string' ? this[fn] : fn\n\t\treturn [...eventAndNode, funk, capture]\n\t})\n\n\tlet $delegate\n\tlet emit\n\n\tconst handleFunctions = R.curry((evt, transform, fns) => {\n\t\tR.compose(\n\t\t\tR.forEach(event => {\n\t\t\t\t$delegate[transform](...event)\n\t\t\t}),\n\t\t\tR.map(item =>\n\t\t\t\tR.find(([a, b]) => {\n\t\t\t\t\t// alls add/remove of events without a selector - things like keydown/keyup\n\t\t\t\t\tif (typeof b === 'function') {\n\t\t\t\t\t\treturn a === item\n\t\t\t\t\t}\n\t\t\t\t\treturn [a, b].join(' ') === item\n\t\t\t\t})(evt)\n\t\t\t)\n\t\t)(fns)\n\t})(events)\n\n\treturn {\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function attachAll\n\t\t * @param {HTMLElement} root - the element to delegate to\n\t\t */\n\t\tattachAll(root = context) {\n\t\t\t$delegate = $delegate || new Delegate(root)\n\t\t\ttry {\n\t\t\t\tR.forEach(event => $delegate.on(...event))(events)\n\t\t\t} catch (err) {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tconsole.error(\n\t\t\t\t\t'Handler must be a type of Function, careful with arrow functions, they will need to be above the events object:',\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function attach\n\t\t * @param {Array} fns - an array of cuntions\n\t\t * @param {HTMLElement} root - the element to delegate to\n\t\t * @return {void}\n\t\t */\n\t\tattach(fns, root = context) {\n\t\t\t$delegate = $delegate || new Delegate(root)\n\t\t\thandleFunctions('on', fns)\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function remove\n\t\t * @param {Array} fns - an array of cuntions\n\t\t * @return {void}\n\t\t */\n\t\tremove(fns) {\n\t\t\tif (!$delegate) return\n\t\t\thandleFunctions('off', fns)\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function destroy\n\t\t * @return {void}\n\t\t */\n\t\tdestroy() {\n\t\t\tif (!$delegate) return\n\t\t\tR.forEach(event => $delegate.off(...event))(events)\n\t\t},\n\n\t\t/**\n\t\t * @memberof createEvents\n\t\t * @function destroy\n\t\t * @param {HTMLElement} root - the element to trigger an event on\n\t\t * @param {String} event - the name of the event to trigger\n\t\t * @return {void}\n\t\t */\n\t\temit($node, event) {\n\t\t\temit = emit || document.createEvent('HTMLEvents')\n\t\t\temit.initEvent(event, true, false)\n\t\t\t$node.dispatchEvent(emit)\n\t\t}\n\t}\n})\n\n/**\n * Create a router\n * @mixin EventsMixin\n * @description class used to manage adding/removing delegated dom events\n *\n * @example\n * import Behaviour, { mix } from '@/core/Behaviour'\n * import {\n * \tEventsMixin,\n * } from '@/core/modules/'\n *\n * export default class ExampleWithAllTheThings extends mix(Behaviour).with(\n * \tEventsMixin\n * ) {\n * \tevents = {\n * \t\t'click [data-link]': 'onClick'\n * \t}\n *\n * \tmount = () => {\n * \t\t// attach all the events\n * \t\tthis.$$events.attachAll()\n * \t\t// attach events by key\n * \t\tthis.$$events.attach(['click [data-link]'])\n * \t\t// remove events by key\n * \t\tthis.$$events.remove(['click [data-link]'])\n * \t\t// destroy all the events\n * \t\tthis.$$events.destroy()\n * \t}\n *\n * \tonClick = (e, elm) => {\n * \t\te.preventDefault()\n * \t\telm.classList.toggle('huzzah')\n * \t}\n * }\n * @return {EventsMixin}\n */\nexport const EventsMixin = superclass =>\n\tclass extends superclass {\n\t\tinit() {\n\t\t\tthis.$$events = createEvents.call(this, this.$el, this.events)\n\n\t\t\tif (super.init) super.init()\n\n\t\t\treturn this\n\t\t}\n\n\t\tdestroy() {\n\t\t\tthis.$$events.destroy()\n\t\t\tif (super.destroy) super.destroy()\n\t\t}\n\t}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import validate from 'validate.js'\nimport { createEvents } from '@/core/modules/createEvents'\nimport * as R from 'ramda'\nimport domify from 'domify'\nimport mitt from 'mitt'\n\n/**\n * @namespace Validate\n * @class Validate\n * @description Handles form validation, and nothing else\n *\n * @example\n *\n * js:\n * const $form = document.querySelector('[data-form-delivery]')\n * const validator = new Validate($form, {\n * \trules: {\n * \t\temail: {\n * \t\t\tpresence: true,\n * \t\t\temail: true\n * \t\t},\n *\n * \t\tfirstName: {\n * \t\t\tpresence: true\n * \t\t},\n *\n * \t\tsurname: {\n * \t\t\tpresence: true\n * \t\t}\n * \t},\n * \tajax: true\n * })\n *\n * validator.mount()\n *\n * validator.on('submit:success', ({ data }) => {\n * \tfetch(data, {\n * \t\tmethod: 'POST'\n * \t})\n * \t.then(response => response.json)\n * \t.then(data => {\n * \t\t// handle the response\n * \t})\n * })\n *\n * html:\n * <form>\n * \t<div class=\"flex-1\" data-field-row=\"\">\n * \t\t<label for=\"firstName\">First Name*</label>\n * \t\t<input type=\"text\" name=\"firstName\" id=\"firstName\" required>\n * \t</div>\n * \t<button type=\"submit\">Submit</button>\n * </form>\n *\n * @param {HTMLElement} el - the form to validate\n * @param {Object} options - any form options\n * @property {Boolean} options.ajax - should prevent default be called when submitting the form\n * @property {Boolean} options.rules - form validation rules\n *\n */\n\nexport default class Validate {\n\tdefaults = {\n\t\tajax: true\n\t}\n\n\tconstructor(el, options) {\n\t\tthis.$el = el\n\t\tthis.options = { ...this.defaults, ...options }\n\t\tObject.assign(this, mitt())\n\t}\n\n\tevents = {\n\t\t'change [required]': 'onChange',\n\t\tsubmit: 'onSubmit'\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method setForm\n\t * @desc set the form\n\t * @param {HTMLElement} form - the form element to validate\n\t *\n\t * @return {Validate}\n\t */\n\tsetForm = form => {\n\t\tthis.$el = form\n\n\t\treturn this\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method setOptions\n\t * @desc update the options\n\t * @param {Object} options - validation rules and options\n\t *\n\t * @return {Validate}\n\t */\n\tsetOptions = options => {\n\t\tthis.options = { ...this.options, options }\n\n\t\treturn this\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method mount\n\t * @desc bootstrap the form, add events\n\t *\n\t * @return {Validate}\n\t */\n\tmount = () => {\n\t\tthis.$$events = createEvents.call(this, this.$el, this.events)\n\t\tthis.$$events.attachAll()\n\n\t\tconst { rules } = this.options\n\n\t\tthis.$fields = R.reduce((acc, field) => {\n\t\t\tconst { name } = field\n\t\t\tconst message = domify('<span class=\"form__error\"></span>')\n\t\t\tconst parent = field.closest('[data-field-row]')\n\n\t\t\tparent.appendChild(message)\n\n\t\t\tacc[name] = {\n\t\t\t\tfield,\n\t\t\t\tparent,\n\t\t\t\tmessage\n\t\t\t}\n\n\t\t\treturn acc\n\t\t}, {})([...this.$el.querySelectorAll('[required]')])\n\n\t\tif (rules) {\n\t\t\tthis.$el.setAttribute('novalidate', true)\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method unmount\n\t * @desc remove the events and error nodes\n\t *\n\t * @return {void}\n\t */\n\tunmount = () => {\n\t\tthis.$$events.destroy()\n\n\t\tObject.entries(this.$fields).forEach(([, { message, parent }]) => {\n\t\t\tparent.removeChild(message)\n\t\t})\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method onChange\n\t * @description Listen to change events on required fields\n\t * @param {Object} e - event object\n\t * @param {HTMLElement} elm - element that has changed\n\t *\n\t * @return {void}\n\t */\n\tonChange = (e, elm) => {\n\t\te.preventDefault()\n\t\tthis.handleErrors(elm)\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method handleErrors\n\t * @description add/remove errors\n\t * @param {HTMLElement} elm - element that has changed\n\t *\n\t * @return {void}\n\t */\n\thandleErrors = elm => {\n\t\tconst { rules } = this.options\n\t\tconst { name } = elm\n\t\tconst errors = validate(this.$el, rules)\n\t\tconst input = this.$fields[name]\n\n\t\tif (errors && errors[name]) {\n\t\t\tthis.showError(input, errors[name])\n\t\t\tthis.emit('input:error', {\n\t\t\t\tinput,\n\t\t\t\terror: errors[name]\n\t\t\t})\n\t\t} else {\n\t\t\tthis.removeError(input)\n\t\t\tthis.emit('input:valid', {\n\t\t\t\tinput\n\t\t\t})\n\t\t}\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method showError\n\t * @description update the fields classes and inject the error message\n\t * @param {Object} input - the fields object - includes, input, parent and message nodes\n\t * @param {Array} error - an array of errors\n\t *\n\t * @return {void}\n\t */\n\tshowError = (input, error) => {\n\t\tconst { message } = input\n\n\t\tObject.entries(input).forEach(([, node]) => {\n\t\t\tnode.classList.remove('is-valid')\n\t\t\tnode.classList.add('has-error')\n\t\t})\n\n\t\tmessage.textContent = error.join(' \\n')\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method showError\n\t * @description update the fields classes and remove the error message\n\t * @param {Object} input - the fields object - includes, input, parent and message nodes\n\t *\n\t * @return {void}\n\t */\n\tremoveError = input => {\n\t\tconst { message } = input\n\n\t\tObject.entries(input).forEach(([, node]) => {\n\t\t\tnode.classList.remove('has-error')\n\t\t\tnode.classList.add('is-valid')\n\t\t})\n\n\t\tmessage.textContent = ''\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method onSubmit\n\t * @description handle form submission, check for errors and emit events\n\t * @param {Object} e - the events object\n\t *\n\t * @return {void}\n\t */\n\tonSubmit = e => {\n\t\tconst { rules, ajax } = this.options\n\n\t\tconst errors = validate(this.$el, rules)\n\n\t\tif (errors || ajax) e.preventDefault()\n\n\t\tif (errors) {\n\t\t\tconst errorArray = Object.entries(errors).map(([key, value]) => {\n\t\t\t\tconst input = this.$fields[key]\n\t\t\t\tthis.handleErrors(input.field, value)\n\n\t\t\t\treturn {\n\t\t\t\t\tinput,\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.emit('submit:errors', errorArray)\n\t\t} else {\n\t\t\tthis.emit('submit:success', {\n\t\t\t\tform: this.$el,\n\t\t\t\tfields: this.$fields,\n\t\t\t\tdata: new FormData(this.$el)\n\t\t\t})\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}